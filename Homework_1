{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "af237e86-dee3-4f74-8f61-8bb3f909bfd1",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import scipy.stats as stats\n",
    "import seaborn as sns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "fb149858-34e8-456e-874e-711925c7b171",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "sbp_data = pd.read_csv('sbpage.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 124,
   "id": "e829d03c-62cf-4a29-8006-4f749147120f",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>sbp</th>\n",
       "      <th>age</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>152.089095</td>\n",
       "      <td>50.004797</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>148.763619</td>\n",
       "      <td>46.748713</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>175.147185</td>\n",
       "      <td>65.900958</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>145.928212</td>\n",
       "      <td>33.664905</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>152.926917</td>\n",
       "      <td>60.455703</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   id         sbp        age\n",
       "0   1  152.089095  50.004797\n",
       "1   2  148.763619  46.748713\n",
       "2   3  175.147185  65.900958\n",
       "3   4  145.928212  33.664905\n",
       "4   5  152.926917  60.455703"
      ]
     },
     "execution_count": 124,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sbp_data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "87ec0d9e-e906-4236-85bd-b38782945cc5",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 122 entries, 0 to 121\n",
      "Data columns (total 3 columns):\n",
      " #   Column  Non-Null Count  Dtype  \n",
      "---  ------  --------------  -----  \n",
      " 0   id      122 non-null    int64  \n",
      " 1   sbp     122 non-null    float64\n",
      " 2   age     122 non-null    float64\n",
      "dtypes: float64(2), int64(1)\n",
      "memory usage: 3.0 KB\n"
     ]
    }
   ],
   "source": [
    "sbp_data.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "12b791c0-c241-4802-8de7-cd6aed42d9c0",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>sbp</th>\n",
       "      <th>age</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>122.000000</td>\n",
       "      <td>122.000000</td>\n",
       "      <td>122.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>61.500000</td>\n",
       "      <td>158.433788</td>\n",
       "      <td>63.577440</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>35.362409</td>\n",
       "      <td>9.334286</td>\n",
       "      <td>17.678449</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>137.923863</td>\n",
       "      <td>30.750458</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>31.250000</td>\n",
       "      <td>151.465797</td>\n",
       "      <td>49.651051</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>61.500000</td>\n",
       "      <td>158.078316</td>\n",
       "      <td>62.782476</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>91.750000</td>\n",
       "      <td>165.375664</td>\n",
       "      <td>78.431230</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>122.000000</td>\n",
       "      <td>179.949435</td>\n",
       "      <td>94.321669</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "               id         sbp         age\n",
       "count  122.000000  122.000000  122.000000\n",
       "mean    61.500000  158.433788   63.577440\n",
       "std     35.362409    9.334286   17.678449\n",
       "min      1.000000  137.923863   30.750458\n",
       "25%     31.250000  151.465797   49.651051\n",
       "50%     61.500000  158.078316   62.782476\n",
       "75%     91.750000  165.375664   78.431230\n",
       "max    122.000000  179.949435   94.321669"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sbp_data.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 125,
   "id": "7286b0a2-4826-4aae-ab14-3f01395e2886",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "x='age'\n",
    "y='sbp'\n",
    "plt.scatter(x,y, data=sbp_data)\n",
    "sns.regplot(x=\"age\", y=\"sbp\", data = sbp_data)\n",
    "plt.grid()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 146,
   "id": "cc3f1cb3-5c6a-4b22-9faa-f210cb1fdb96",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table class=\"simpletable\">\n",
       "<caption>OLS Regression Results</caption>\n",
       "<tr>\n",
       "  <th>Dep. Variable:</th>           <td>sbp</td>       <th>  R-squared:         </th> <td>   0.660</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Model:</th>                   <td>OLS</td>       <th>  Adj. R-squared:    </th> <td>   0.657</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Method:</th>             <td>Least Squares</td>  <th>  F-statistic:       </th> <td>   233.2</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Date:</th>             <td>Tue, 05 Mar 2024</td> <th>  Prob (F-statistic):</th> <td>6.54e-30</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Time:</th>                 <td>21:17:33</td>     <th>  Log-Likelihood:    </th> <td> -379.26</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>No. Observations:</th>      <td>   122</td>      <th>  AIC:               </th> <td>   762.5</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Residuals:</th>          <td>   120</td>      <th>  BIC:               </th> <td>   768.1</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Model:</th>              <td>     1</td>      <th>                     </th>     <td> </td>   \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Covariance Type:</th>      <td>nonrobust</td>    <th>                     </th>     <td> </td>   \n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "    <td></td>       <th>coef</th>     <th>std err</th>      <th>t</th>      <th>P>|t|</th>  <th>[0.025</th>    <th>0.975]</th>  \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>const</th> <td>  131.1560</td> <td>    1.853</td> <td>   70.769</td> <td> 0.000</td> <td>  127.487</td> <td>  134.825</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>age</th>   <td>    0.4290</td> <td>    0.028</td> <td>   15.272</td> <td> 0.000</td> <td>    0.373</td> <td>    0.485</td>\n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "  <th>Omnibus:</th>       <td> 2.966</td> <th>  Durbin-Watson:     </th> <td>   2.241</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Prob(Omnibus):</th> <td> 0.227</td> <th>  Jarque-Bera (JB):  </th> <td>   2.487</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Skew:</th>          <td> 0.230</td> <th>  Prob(JB):          </th> <td>   0.288</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Kurtosis:</th>      <td> 3.526</td> <th>  Cond. No.          </th> <td>    247.</td>\n",
       "</tr>\n",
       "</table><br/><br/>Notes:<br/>[1] Standard Errors assume that the covariance matrix of the errors is correctly specified."
      ],
      "text/latex": [
       "\\begin{center}\n",
       "\\begin{tabular}{lclc}\n",
       "\\toprule\n",
       "\\textbf{Dep. Variable:}    &       sbp        & \\textbf{  R-squared:         } &     0.660   \\\\\n",
       "\\textbf{Model:}            &       OLS        & \\textbf{  Adj. R-squared:    } &     0.657   \\\\\n",
       "\\textbf{Method:}           &  Least Squares   & \\textbf{  F-statistic:       } &     233.2   \\\\\n",
       "\\textbf{Date:}             & Tue, 05 Mar 2024 & \\textbf{  Prob (F-statistic):} &  6.54e-30   \\\\\n",
       "\\textbf{Time:}             &     21:17:33     & \\textbf{  Log-Likelihood:    } &   -379.26   \\\\\n",
       "\\textbf{No. Observations:} &         122      & \\textbf{  AIC:               } &     762.5   \\\\\n",
       "\\textbf{Df Residuals:}     &         120      & \\textbf{  BIC:               } &     768.1   \\\\\n",
       "\\textbf{Df Model:}         &           1      & \\textbf{                     } &             \\\\\n",
       "\\textbf{Covariance Type:}  &    nonrobust     & \\textbf{                     } &             \\\\\n",
       "\\bottomrule\n",
       "\\end{tabular}\n",
       "\\begin{tabular}{lcccccc}\n",
       "               & \\textbf{coef} & \\textbf{std err} & \\textbf{t} & \\textbf{P$> |$t$|$} & \\textbf{[0.025} & \\textbf{0.975]}  \\\\\n",
       "\\midrule\n",
       "\\textbf{const} &     131.1560  &        1.853     &    70.769  &         0.000        &      127.487    &      134.825     \\\\\n",
       "\\textbf{age}   &       0.4290  &        0.028     &    15.272  &         0.000        &        0.373    &        0.485     \\\\\n",
       "\\bottomrule\n",
       "\\end{tabular}\n",
       "\\begin{tabular}{lclc}\n",
       "\\textbf{Omnibus:}       &  2.966 & \\textbf{  Durbin-Watson:     } &    2.241  \\\\\n",
       "\\textbf{Prob(Omnibus):} &  0.227 & \\textbf{  Jarque-Bera (JB):  } &    2.487  \\\\\n",
       "\\textbf{Skew:}          &  0.230 & \\textbf{  Prob(JB):          } &    0.288  \\\\\n",
       "\\textbf{Kurtosis:}      &  3.526 & \\textbf{  Cond. No.          } &     247.  \\\\\n",
       "\\bottomrule\n",
       "\\end{tabular}\n",
       "%\\caption{OLS Regression Results}\n",
       "\\end{center}\n",
       "\n",
       "Notes: \\newline\n",
       " [1] Standard Errors assume that the covariance matrix of the errors is correctly specified."
      ],
      "text/plain": [
       "<class 'statsmodels.iolib.summary.Summary'>\n",
       "\"\"\"\n",
       "                            OLS Regression Results                            \n",
       "==============================================================================\n",
       "Dep. Variable:                    sbp   R-squared:                       0.660\n",
       "Model:                            OLS   Adj. R-squared:                  0.657\n",
       "Method:                 Least Squares   F-statistic:                     233.2\n",
       "Date:                Tue, 05 Mar 2024   Prob (F-statistic):           6.54e-30\n",
       "Time:                        21:17:33   Log-Likelihood:                -379.26\n",
       "No. Observations:                 122   AIC:                             762.5\n",
       "Df Residuals:                     120   BIC:                             768.1\n",
       "Df Model:                           1                                         \n",
       "Covariance Type:            nonrobust                                         \n",
       "==============================================================================\n",
       "                 coef    std err          t      P>|t|      [0.025      0.975]\n",
       "------------------------------------------------------------------------------\n",
       "const        131.1560      1.853     70.769      0.000     127.487     134.825\n",
       "age            0.4290      0.028     15.272      0.000       0.373       0.485\n",
       "==============================================================================\n",
       "Omnibus:                        2.966   Durbin-Watson:                   2.241\n",
       "Prob(Omnibus):                  0.227   Jarque-Bera (JB):                2.487\n",
       "Skew:                           0.230   Prob(JB):                        0.288\n",
       "Kurtosis:                       3.526   Cond. No.                         247.\n",
       "==============================================================================\n",
       "\n",
       "Notes:\n",
       "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
       "\"\"\""
      ]
     },
     "execution_count": 146,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Ordinary least squares can be used to show most of the stats info\n",
    "y = sbp_data['sbp']\n",
    "x = sbp_data['age']\n",
    "x1 = sm.add_constant(x)\n",
    "result = sm.OLS(y, x1).fit()\n",
    "result.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0a3ca8cf-c2c8-439a-9c8f-34a7725cda18",
   "metadata": {},
   "outputs": [],
   "source": [
    "#1(a) In this model we can assume SBP and age of the subgect follows a positive correlation, where SBP increases as age increases"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 126,
   "id": "78ac663a-1f09-4fd3-b61c-a12cb4bd5aa2",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "import statsmodels.api as sm\n",
    "from statsmodels.formula.api import ols"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 130,
   "id": "ec9c36fe-03e8-4e2b-ba1d-e66e0af151f3",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                sum_sq     df          F        PR(>F)\n",
      "sbp       24969.641451    1.0  233.24865  6.543447e-30\n",
      "Residual  12846.192127  120.0        NaN           NaN\n"
     ]
    }
   ],
   "source": [
    "#perform ANOVA\n",
    "model = ols('age ~ sbp',\n",
    "            data = sbp_data).fit()\n",
    "anova_result = sm.stats.anova_lm(model, typ=2)\n",
    "print (anova_result)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a2e52acb-7cd2-433c-86d7-db61fe1c57cd",
   "metadata": {},
   "outputs": [],
   "source": [
    "#1b What are the least squares estimates for intercept and slope, i.e., b0 hat and\n",
    "#B 1 hat?\n",
    "\n",
    "b0=131.1560 #coef constant (X)\n",
    "b1=0.4290 #slope for age\n",
    "\n",
    "#1c The intercept represents the estimated value of the dependent variable (SBP) \n",
    "#when all independent variables are zero\n",
    "\n",
    "#The slope coefficient represents the average change in the dependent variable associated\n",
    "#with a one-unit increase in the independent variable (age)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "0de86d97-01ae-407a-aa7a-b476a325fce6",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "#1d #What is estimated expected change in SBP associated with 5 years increase in Age?\n",
    "\n",
    "#creating testing and training data sets\n",
    "X = sbp_data['age']\n",
    "y = sbp_data['sbp']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "c4595df3-a1c9-4457-ba27-c47c56d15d8e",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "X = np.array(X)\n",
    "y = np.array(y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "f4822dc3-c039-4138-9575-cb9847adb1e4",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(122, 1)\n",
      "(122, 1)\n"
     ]
    }
   ],
   "source": [
    "X = X.reshape(-1,1)\n",
    "print(X.shape)\n",
    "\n",
    "y=y.reshape(-1,1)\n",
    "print(y.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "df0355bb-59b3-4341-95b4-6b2aea2432f4",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "#upload testing model\n",
    "from sklearn.model_selection import train_test_split\n",
    "X_train, x_test, y_train, y_test = train_test_split(X, y, test_size=0.2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "05fa75aa-3356-4ae4-afb6-7b8343af42b2",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(97, 1)"
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_train.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "6afc1a6c-b754-4d62-a520-d160d5bdf9d3",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(97, 1)"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_train.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "60ee7a63-7ae3-40cf-af4b-2b51561d23c1",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-1 {color: black;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LinearRegression()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">LinearRegression</label><div class=\"sk-toggleable__content\"><pre>LinearRegression()</pre></div></div></div></div></div>"
      ],
      "text/plain": [
       "LinearRegression()"
      ]
     },
     "execution_count": 42,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.linear_model import LinearRegression\n",
    "SimpleLinearRegression = LinearRegression(fit_intercept = True)\n",
    "SimpleLinearRegression.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 144,
   "id": "28a20afc-ebc6-44f4-9271-fa903fbcd5dd",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "sbp = [[161.23993225]]\n"
     ]
    }
   ],
   "source": [
    "#testing prediction model to estimate SBP for a patient age 70\n",
    "age = np.array([70])\n",
    "age = age.reshape(-1,1)\n",
    "sbp = SimpleLinearRegression.predict(age)\n",
    "print('sbp =', sbp)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 143,
   "id": "ac4b1513-d80a-49e8-bfa4-811e8c3179fb",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The estimated expected change in SBP with 5-year increase in age is: 2.145\n"
     ]
    }
   ],
   "source": [
    "#1e What is estimated expected change in SBP associated with 5 years increase in Age?\n",
    "coef_age = 0.4290\n",
    "increase_in_age = 5\n",
    "estimated_change_in_sbp = coef_age * increase_in_age\n",
    "print(\"The estimated expected change in SBP with 5-year increase in age is:\", estimated_change_in_sbp)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1898e2e8-cd67-4e0a-8637-99b2fb7e2347",
   "metadata": {},
   "outputs": [],
   "source": [
    "#1(f)\n",
    "#Complete the 8 missing numbers in ’DF’, ’Sum of Squares’ and ’Mean\n",
    "#Square’ in the ANOVA table above. You must show the intermediate steps of how\n",
    "#you get results for these missing numbers."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "id": "a87890bd-9056-4586-a60b-eaf31668c78c",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "import statsmodels.api as sm\n",
    "from statsmodels.formula.api import ols"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "id": "c5a76558-aadd-4253-8e93-7e45b441468f",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                sum_sq     df          F        PR(>F)\n",
      "sbp       24969.641451    1.0  233.24865  6.543447e-30\n",
      "Residual  12846.192127  120.0        NaN           NaN\n"
     ]
    }
   ],
   "source": [
    "model = ols('age ~ sbp',\n",
    "            data = sbp_data).fit()\n",
    "anova_result = sm.stats.anova_lm(model, typ=2)\n",
    "print (anova_result)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e31694c0-6fe5-4367-adca-5bc4c644ba5a",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "#1(g)\n",
    "#Calculate the F test statistic and its p-value in ANOVA table. State\n",
    "#the null and alternative hypothesis here, the degrees of freedom of F test statistic,\n",
    "#and make a conclusion at significance level α = 0.05. (Using F-distribution table\n",
    "#at Appendix B.4 of the textbook to find p-value)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f0f45e7f-09e5-4763-ba38-30e9c05e5f6c",
   "metadata": {},
   "outputs": [],
   "source": [
    "#To state the null and alternative hypothesis, I will perform a one sample t-test for attribute sbp in spb_data\n",
    "#Ho = population sbp mean \n",
    "#Alternative hypothesis population mean does not = specific value\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 93,
   "id": "c7c5785b-e821-4b25-8690-4b03bbfe104f",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "from scipy import stats"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 98,
   "id": "a059ef10-0130-42ef-ba30-e6ed7133ae8b",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0      152.089095\n",
       "1      148.763619\n",
       "2      175.147185\n",
       "3      145.928212\n",
       "4      152.926917\n",
       "          ...    \n",
       "117    172.351980\n",
       "118    162.384306\n",
       "119    160.637535\n",
       "120    158.641617\n",
       "121    155.730657\n",
       "Name: sbp, Length: 122, dtype: float64"
      ]
     },
     "execution_count": 98,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#first, isolate the attribute I want to test\n",
    "\n",
    "data1=sbp_data['sbp']\n",
    "data1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 104,
   "id": "6aac16b4-8587-48f6-8717-399e7aa85627",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "TtestResult(statistic=0.5133056952428288, pvalue=0.6086734653337051, df=121)"
      ]
     },
     "execution_count": 104,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#perform t test using hypothesized SBP mean\n",
    "\n",
    "stats.ttest_1samp(data1, 158)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0a62219d-c2ec-4001-b106-60ac0ba51921",
   "metadata": {},
   "outputs": [],
   "source": [
    "#If p value <= alpha we reject the null hypothesis and say that the data is statistically significant. \n",
    "#otherwise we accept the null hypothesis. \n",
    "#At a significance level (α) of 0.05, the p-value of the t-test result (0.6087) is higher than the significance level. \n",
    "#Therefore, we fail to reject the null hypothesis.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "971702b6-9b77-4f06-9bdf-f40baec9cac6",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "#1(j) Pearson correlation coefficient"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 91,
   "id": "5feb7485-9545-4aa3-a83a-720790601d61",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "from scipy import stats"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 92,
   "id": "1240553c-1c1a-43b9-b3ae-8c25cacf73fd",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The Pearson Correlation Coefficient is 0.8125859596932736 with a P-value of P= 6.543447226176522e-30\n"
     ]
    }
   ],
   "source": [
    "pearson_coef, p_value= stats.pearsonr(sbp_data['sbp'], sbp_data['age'])\n",
    "print('The Pearson Correlation Coefficient is', pearson_coef, \"with a P-value of P=\", p_value)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ad352a5c-e6f2-4cf3-80b1-1e14e398e5d7",
   "metadata": {},
   "outputs": [],
   "source": [
    "#The Pearson correlation coefficient of 0.8125859596932736 indicates a strong positive linear relationship between the two variables being compared. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "cbcce858-df2c-4b9e-a9b8-1dbb762e5bf1",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "90aa29f4-4ed9-42a4-95bf-9fe13f768d5e",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
